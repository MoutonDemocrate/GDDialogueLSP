name: Build and Release VSCode Extension

on:
  push:
    branches:
      - main

permissions:
  contents: write   # Allow creating releases

jobs:
  release:
    if: startsWith(github.event.head_commit.message, '[')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install

      - name: Install VSCE & OVSX
        run: npm install -g @vscode/vsce ovsx

      - name: Build VSIX
        run: vsce package

      - name: Parse commit message
        id: parse
        run: |
          # Use the full commit message provided by GitHub
          msg="${{ github.event.head_commit.message }}"

          # Take the first line (subject) which should be: [TAG](X.Y.Z) Version Name
          subject=$(printf "%s\n" "$msg" | head -n1)

          # Match: [TAG](MAJOR.MINOR.PATCH) Version Name
          if [[ $subject =~ ^\[(RELEASE|PATCH)\]\(([0-9]+\.[0-9]+\.[0-9]+)\)[[:space:]]+(.+)$ ]]; then
            tag="${BASH_REMATCH[1]}"
            version="${BASH_REMATCH[2]}"
            version_name="${BASH_REMATCH[3]}"
          else
            echo "Commit subject does not match expected format: [TAG](X.Y.Z) Version Name" >&2
            exit 1
          fi

          # Export outputs
          echo "tag=$tag" >> "$GITHUB_OUTPUT"
          echo "version=$version" >> "$GITHUB_OUTPUT"
          echo "version_name=$version_name" >> "$GITHUB_OUTPUT"

          # Create multiline body: full commit message + autorelease line
          echo "body<<EOF" >> "$GITHUB_OUTPUT"
          printf "%s\n\nAutorelease from commit %s\n" "$msg" "$GITHUB_SHA" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.parse.outputs.tag }}
          name: "${{ steps.parse.outputs.version }} :: ${{ steps.parse.outputs.version_name }}"
          body: ${{ steps.parse.outputs.body }}
          files: "*.vsix"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish to OpenVSX
        run: npx ovsx publish *.vsix -p ${{ secrets.OPENVSX_TOKEN }}
